diff -r 91915818e434 deps/SDL2-2.0.3/src/audio/coreaudio/SDL_coreaudio.c
--- a/deps/SDL2-2.0.3/src/audio/coreaudio/SDL_coreaudio.c	Fri Aug 14 00:21:10 2015 +1000
+++ b/deps/SDL2-2.0.3/src/audio/coreaudio/SDL_coreaudio.c	Fri Aug 14 21:12:36 2015 +1000
@@ -308,8 +308,48 @@
               UInt32 inBusNumber, UInt32 inNumberFrames,
               AudioBufferList * ioData)
 {
-    /* err = AudioUnitRender(afr->fAudioUnit, ioActionFlags, inTimeStamp, inBusNumber, inNumberFrames, afr->fAudioBuffer); */
-    /* !!! FIXME: write me! */
+    OSStatus status;
+    SDL_AudioDevice *this = (SDL_AudioDevice *) inRefCon;
+    UInt32 remaining, len, frameSize;
+    AudioBuffer abuf;
+    AudioBufferList buflist;
+    void *ptr;
+
+    abuf.mNumberChannels = this->spec.channels; 
+    buflist.mNumberBuffers = 1;
+
+    frameSize = (SDL_AUDIO_BITSIZE(this->spec.format) / 8) * this->spec.channels;
+    remaining = inNumberFrames * frameSize;
+    ptr = this->hidden->buffer;
+
+    while (remaining > 0) {
+        /* render input audio into buffer */
+        len = this->hidden->bufferSize - this->hidden->bufferOffset;
+        if (len > remaining) {
+            len = remaining;
+        }
+        ptr = (char*)this->hidden->buffer + this->hidden->bufferOffset;
+        abuf.mDataByteSize = len;
+        abuf.mData = ptr;
+        buflist.mBuffers[0] = abuf;
+        status = AudioUnitRender(this->hidden->audioUnit, ioActionFlags, inTimeStamp, inBusNumber,
+            len / frameSize, &buflist);
+        if (status) {
+            SDL_SetError("CoreAudio error (%s): %d", "AudioUnitRender", (int) status); \
+            return status;
+        }
+        remaining -= len;
+        this->hidden->bufferOffset += len;
+        if (this->hidden->bufferOffset >= this->hidden->bufferSize) {
+            /* The buffer is full, send it to the user callback */
+            SDL_LockMutex(this->mixer_lock);
+            (*this->spec.callback)(this->spec.userdata,
+                        this->hidden->buffer, this->hidden->bufferSize);
+            SDL_UnlockMutex(this->mixer_lock);
+            this->hidden->bufferOffset = 0;
+        }
+    }
+
     return noErr;
 }
 
@@ -386,7 +426,11 @@
     desc.componentManufacturer = kAudioUnitManufacturer_Apple;
 
 #if MACOSX_COREAUDIO
-    desc.componentSubType = kAudioUnitSubType_DefaultOutput;
+    if (!iscapture) {
+        desc.componentSubType = kAudioUnitSubType_DefaultOutput;
+    } else {
+        desc.componentSubType = kAudioUnitSubType_HALOutput;
+    }
     comp = FindNextComponent(NULL, &desc);
 #else
     desc.componentSubType = kAudioUnitSubType_RemoteIO;
@@ -414,13 +458,37 @@
     this->hidden->audioUnitOpened = 1;
 
 #if MACOSX_COREAUDIO
-    result = AudioUnitSetProperty(this->hidden->audioUnit,
-                                  kAudioOutputUnitProperty_CurrentDevice,
-                                  kAudioUnitScope_Global, 0,
-                                  &this->hidden->deviceID,
-                                  sizeof(AudioDeviceID));
-    CHECK_RESULT
-        ("AudioUnitSetProperty (kAudioOutputUnitProperty_CurrentDevice)");
+    if (iscapture) {
+        UInt32 enableIO = 1;
+        result = AudioUnitSetProperty(this->hidden->audioUnit,
+                kAudioOutputUnitProperty_EnableIO,
+                kAudioUnitScope_Input,
+                input_bus,
+                &enableIO, sizeof(enableIO));
+        CHECK_RESULT("AudioUnitSetProperty (kAudioOutputUnitProperty_EnableIO 1)");
+        enableIO = 0;
+        result = AudioUnitSetProperty(this->hidden->audioUnit,
+                kAudioOutputUnitProperty_EnableIO,
+                kAudioUnitScope_Output,
+                output_bus,
+                &enableIO, sizeof(enableIO));
+        CHECK_RESULT("AudioUnitSetProperty (kAudioOutputUnitProperty_EnableIO 0)");
+ 
+        result = AudioUnitSetProperty(this->hidden->audioUnit,
+                             kAudioOutputUnitProperty_CurrentDevice,
+                             kAudioUnitScope_Global, 1,
+                             &this->hidden->deviceID,
+                             sizeof(AudioDeviceID));
+        CHECK_RESULT("AudioUnitSetProperty (kAudioOutputUnitProperty_CurrentDevice)");
+    } else {
+        result = AudioUnitSetProperty(this->hidden->audioUnit,
+                                      kAudioOutputUnitProperty_CurrentDevice,
+                                      kAudioUnitScope_Global, 0,
+                                      &this->hidden->deviceID,
+                                      sizeof(AudioDeviceID));
+        CHECK_RESULT
+            ("AudioUnitSetProperty (kAudioOutputUnitProperty_CurrentDevice)");
+    }
 #endif
 
     /* Set the data format of the audio unit. */
@@ -433,11 +501,19 @@
     SDL_memset(&callback, 0, sizeof(AURenderCallbackStruct));
     callback.inputProc = ((iscapture) ? inputCallback : outputCallback);
     callback.inputProcRefCon = this;
-    result = AudioUnitSetProperty(this->hidden->audioUnit,
-                                  kAudioUnitProperty_SetRenderCallback,
-                                  scope, bus, &callback, sizeof(callback));
-    CHECK_RESULT
-        ("AudioUnitSetProperty (kAudioUnitProperty_SetRenderCallback)");
+    if (!iscapture) {
+        result = AudioUnitSetProperty(this->hidden->audioUnit,
+                                      kAudioUnitProperty_SetRenderCallback,
+                                      scope, bus, &callback, sizeof(callback));
+        CHECK_RESULT
+            ("AudioUnitSetProperty (kAudioUnitProperty_SetRenderCallback)");
+    } else {
+        result = AudioUnitSetProperty(this->hidden->audioUnit,
+                                      kAudioOutputUnitProperty_SetInputCallback,
+                                      kAudioUnitScope_Global, bus, &callback, sizeof(callback));
+        CHECK_RESULT
+            ("AudioUnitSetProperty (kAudioUnitProperty_SetInputCallback)");
+    }
 
     /* Calculate the final parameters for this audio specification */
     SDL_CalculateAudioSpec(&this->spec);
@@ -445,6 +521,9 @@
     /* Allocate a sample buffer */
     this->hidden->bufferOffset = this->hidden->bufferSize = this->spec.size;
     this->hidden->buffer = SDL_malloc(this->hidden->bufferSize);
+    if (iscapture) {
+        this->hidden->bufferOffset = 0;
+    }
 
     result = AudioUnitInitialize(this->hidden->audioUnit);
     CHECK_RESULT("AudioUnitInitialize");
@@ -532,6 +611,7 @@
     /* Set the function pointers */
     impl->OpenDevice = COREAUDIO_OpenDevice;
     impl->CloseDevice = COREAUDIO_CloseDevice;
+    impl->HasCaptureSupport = 1;
 
 #if MACOSX_COREAUDIO
     impl->DetectDevices = COREAUDIO_DetectDevices;
